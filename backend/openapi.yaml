openapi: 3.0.0
info:
  title: TodoGenie API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  auth_token:
                    type: string
  /auth/login:
    post:
      summary: Log in an existing user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  auth_token:
                    type: string
  /users/{user_id}:
    get:
      summary: Retrieve user profile
      operationId: getUserProfile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /tasks:
    get:
      summary: List all tasks
      operationId: listTasks
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
        - name: search_query
          in: query
          schema:
            type: string
        - name: filter_status
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      summary: Create a new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskInput"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /tasks/{task_id}:
    get:
      summary: Retrieve a task
      operationId: getTask
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    patch:
      summary: Update a task
      operationId: updateTask
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskInput"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    delete:
      summary: Delete a task
      operationId: deleteTask
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Task deleted successfully
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
        name:
          type: string
        created_at:
          type: string
    CreateUserInput:
      type: object
      properties:
        email:
          type: string
        password_hash:
          type: string
        name:
          type: string
    Task:
      type: object
      properties:
        task_id:
          type: string
        user_id:
          type: string
        task_name:
          type: string
        due_date:
          type: string
          nullable: true
        is_complete:
          type: boolean
    CreateTaskInput:
      type: object
      properties:
        user_id:
          type: string
        task_name:
          type: string
        due_date:
          type: string
          nullable: true
        is_complete:
          type: boolean
          default: false
    UpdateTaskInput:
      type: object
      properties:
        task_id:
          type: string
        task_name:
          type: string
        due_date:
          type: string
          nullable: true
        is_complete:
          type: boolean
